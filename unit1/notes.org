**Syntax** is how you write something
**Semantics** is what it means

Static environment: type checking, exist before the program evaluates
Dynamic environment: uses for evaluation (check what is the value of this variable the current environment)

Every expression has 3 things:
- Syntax
- Type checking rules: produces a type or a fail
- Evaluation rules: produces a result, error message, or infinite loop


All values are expressions (they always evaluate to themselves**
Not all expressions are values

Shadowing :: add a variable to an environment, when there's already that variable in that environment
- Example:
val a = 10
val b = a * 2
val a = 5 (* b is still mapped to 20 *)
You can't re-assign a variable to another value. When we do a = 5, ML will create a new dynamic environment in which a = 5 (a is shadowed)
In other words, there's no way to assign a variable in ML. You just create a new binding in a new dynamic environment
That's why he doesn't want us to use "use" multiple times because it causes the previous bindings are still available later 

Binding = giving names to things in a given well delimited context
Assigning = storing things in some location

When understand anything, there are always 3 rules: syntax rule, type checking rule, and evaluation rule

** Tuples

Specified size
Must specify types, but can hold different types
Can have more than two elements (triple, 4-tuple)

** List

Unspecified size
Can only hold one type
Functions involving list tend to be recursive (because of the unknown length)

** Let

`let b1 in e end` where b1 is a binding and e is an expression, e.g.
let val x = 1 in x + 2 end;

We can refer to things that we define both in later bindings and in the body, e.g. how y is defined in terms of x here:
let val x = 1 in y = x + 10 in x + y end;

Seems like a more explicitly way to define scope. In Python / R scope seems more explicit

** Options

A common scenario is we want to return "nothing" or "something". For example, a function that returns the max of a list will either return "nothing" for an empty list and "something" for a list. ML uses options for this scenario.

Building an option:
- NONE
- SOME e

Accessing stuff inside the option:
- isSome has type 'a option -> bool
- valof has type 'a option -> 'a (exception if None)

** Benefits of immutability

ML does not allow us to reassign a variable to another value (indeed, there is no assignment statement in the first place, only binding)

The benefits is that when we do `y = x`, ML alias y and x (i.e. reuse x elements for y instead of making copies). This is more efficient. And since we know x never changes, we can be sure that y never changes because of x. (Languages with mutability runs this risk).
